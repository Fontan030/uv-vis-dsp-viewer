import chardet
import matplotlib.pyplot as plt
import tkinter as tk
from matplotlib.ticker import MultipleLocator
from tkinter import filedialog, ttk

#import sys

def load_file():
    global sample_name, wavelength_list, data_list, peaks_list
    input_filename = filedialog.askopenfilename(filetypes=[('DSP files', '*.dsp')])
    if input_filename:
        wavelength_list, data_list, peaks_list = [], [], []
        refresh_peaks_listbox()
        plt.close()
        with open(input_filename, 'rb') as dsp_file:
            raw_dsp = dsp_file.read()
            file_encoding = chardet.detect(raw_dsp)['encoding']
            dsp_string = raw_dsp.decode(file_encoding).replace('\r', '')
            sample_name, wavelength_list, data_list = parse_dsp_string(dsp_string)
            find_peaks_btn.config(state=tk.NORMAL)
            #print(sys.modules.keys())
            build_plot(wavelength_list, data_list)

def parse_dsp_string(dsp_string):
    dsp_lines = dsp_string.split('\n')
    meta_inf_idx = dsp_lines.index('nm')
    sample_name = dsp_lines[meta_inf_idx-1]
    start_wavelength = int(dsp_lines[meta_inf_idx+1])
    end_wavelength = int(dsp_lines[meta_inf_idx+2])
    step = int(dsp_lines[meta_inf_idx+3])
    meta_inf_str = f'{sample_name}:\nstart {start_wavelength}, end {end_wavelength}, step {step}'
    meta_inf_msg.config(text=meta_inf_str)
    data_idx = dsp_lines.index('#DATA')
    data_list = dsp_lines[data_idx+1:]
    data_list = [float(i) for i in data_list if i != '']
    curr_wavelength = start_wavelength
    wavelength_list = []
    for i in data_list:
        wavelength_list.append(curr_wavelength)
        curr_wavelength += step
    return sample_name, wavelength_list, data_list

def build_plot(wavelength_list, data_list):
    fig, plot_obj = plt.subplots()
    fig.set_size_inches(9.92, 5.22)
    plot_obj.plot(wavelength_list, data_list, '-', linewidth=1, color='black', label=sample_name)
    plot_obj.set_xlim(min(wavelength_list), max(wavelength_list))
    if min(data_list) > 0:
        plot_obj.set_ylim(bottom=0)
    plot_obj.set_ylim(top=int(max(data_list)+1))
    plot_obj.set_xlabel('nm')
    plot_obj.set_ylabel('A', rotation='horizontal')
    plot_obj.yaxis.set_label_coords(0,1.02)
    plot_obj.grid(True, which='major')
    plot_obj.grid(True, which='minor', linestyle='--', alpha=0.7)
    y_ticks = range(int(min(data_list)), int(max(data_list)+2))
    plt.yticks(y_ticks)
    plt.minorticks_on()
    plt.tight_layout()
    plt.legend(loc='best')
    plt.show()

def find_peaks():
    global peaks_list
    peaks_list = []
    positive_diff_count = 0
    positive_diff_thresold = 5
    for idx, elem in enumerate(data_list):
        prev_elem = elem if idx == 0 else data_list[idx-1]
        diff = elem - prev_elem
        if diff > 0:
            positive_diff_count += 1
        if diff < 0 and positive_diff_count > positive_diff_thresold:
            peaks_list.append([wavelength_list[idx-1], data_list[idx-1]])
            positive_diff_count = 0
    refresh_peaks_listbox()

def remove_peak():
    global peaks_list
    if peaks_listbox.curselection():
        selected_peak = peaks_listbox.curselection()[0]
        del peaks_list[selected_peak]
        refresh_peaks_listbox()

def refresh_peaks_listbox():
    peaks_listbox.delete(0, tk.END)
    if peaks_list:
        for peak in peaks_list:
            peak_str = f'{peak[0]} nm: {peak[1]}'
            peaks_listbox.insert(tk.END, peak_str)
        remove_peak_btn.config(state=tk.NORMAL)
        calculate_extinction_btn.config(state=tk.NORMAL)
    else:
        remove_peak_btn.config(state=tk.DISABLED)
        calculate_extinction_btn.config(state=tk.DISABLED)

def calculate_extinction():
    if concentration_signif.get() and concentration_exp.get():
        conc_significand = float(concentration_signif.get())
        conc_exponent = int(concentration_exp.get()) * -1
        peaks_substrings = []
        for peak in peaks_list:
            extinction = peak[1] / conc_significand * 10 ** conc_exponent
            substring = f'{peak[0]} ({extinction:.1f})'
            peaks_substrings.append(substring)
        peaks_string = 'λ max, nm (ε): ' + ', '.join(peaks_substrings)
    else:
        peaks_string = 'Enter molar concentration!'
    extinction_text.set(peaks_string)

def copy_extinction_text():
    root.clipboard_clear()
    root.clipboard_append(extinction_text.get())

def show_help():
    help_window = tk.Toplevel()
    help_window.title("Help")
    help_window.geometry("300x200")
    root.eval(f'tk::PlaceWindow {str(help_window)} center')
    help_text = 'UV-vis DSP viewer 0.1\n\nAn open source viewer for UV-vis spectral data files generated by VISIONlite Scan\n\nCreated with matplotlib and tkinter\n\nhttps://github.com/Fontan030'
    tk.Message(help_window, text=help_text, justify='center', width=288).pack(pady=20)

def close_all_windows():
    plt.close()
    root.destroy()

wavelength_list, data_list, peaks_list = [], [], []
sample_name = ''

root = tk.Tk()
root.title("UV-vis DSP viewer")
root.geometry("400x400")
root.eval('tk::PlaceWindow . center')
root.protocol("WM_DELETE_WINDOW", close_all_windows)

root.columnconfigure(index=0, weight=3)
for c in range(1,4): root.columnconfigure(index=c, weight=1)
root.columnconfigure(index=4, weight=3)
for r in range(7): root.rowconfigure(index=r, weight=1)

load_file_btn = tk.Button(root, text='Load file', command=load_file)
load_file_btn.grid(row=0, column=0, sticky="w", padx = 10)

help_btn = tk.Button(root, text='Help', command=show_help)
help_btn.grid(row=0, column=4, sticky="e", padx = 10)

meta_inf_msg = tk.Message(text="Select a .dsp file\n", width = 384)
meta_inf_msg.grid(row=1, column=0, columnspan=5, sticky="w", padx = 10)

find_peaks_btn = tk.Button(root, text='Find peaks', command=find_peaks, state=tk.DISABLED)
find_peaks_btn.grid(row=2, column=0, sticky="w", padx = 10)

remove_peak_btn = tk.Button(root, text='Remove peak', command=remove_peak, state=tk.DISABLED)
remove_peak_btn.grid(row=2, column=4, sticky="e", padx = 10)

peaks_listbox = tk.Listbox(root, height=5)
peaks_listbox.grid(row=3, column=0, columnspan=5, sticky="ew", padx = 10)

concentration_label_1 = tk.Label(text='Molar concentration:')
concentration_label_1.grid(row=4, column=0)

concentration_signif = ttk.Entry(width=4)
concentration_signif.grid(row=4, column=1)

concentration_label_2 = tk.Label(text='• 10^')
concentration_label_2.grid(row=4, column=2)

concentration_exp = ttk.Entry(width=3)
concentration_exp.grid(row=4, column=3)

concentration_label_3 = tk.Label(text='mol/L')
concentration_label_3.grid(row=4, column=4, sticky="w", padx = 10)

calculate_extinction_btn = tk.Button(root, text='Calculate extinction', command=calculate_extinction,  state=tk.DISABLED)
calculate_extinction_btn.grid(row=5, column=0, sticky="w", padx = 10)

extinction_text = tk.StringVar()
extinction_text_output = ttk.Entry(textvariable=extinction_text)
extinction_text_output.grid(row=6, column=0, columnspan=4, sticky="ew", padx = 10)

copy_btn = tk.Button(root, text='Copy', command=copy_extinction_text)
copy_btn.grid(row=6, column=4, sticky="e", padx = 10)

root.mainloop()